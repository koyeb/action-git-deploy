name: 'Koyeb: build and deploy'
description: 'Build and deploy a GIT repository on Koyeb.'

branding:
  icon: chevron-right
  color: gray-dark

inputs:
  app-name:
    description: "The Koyeb application name to create"
    required: false

  service-name:
    description: "Koyeb service name"
    required: false
    default: "${{ github.ref_name }}"

  build-timeout:
    description: "Maximum number of seconds to wait for the build"
    required: false
    # 15 minutes
    default: "900"

  healthy-timeout:
    description: "Maximum number of seconds to wait for healthy status to be reached"
    required: false
    # 15 minutes
    default: "900"

  privileged:
    description: "Whether to run the build in privileged mode"
    required: false
    default: "false"

  # Docker deployment
  docker:
    description: "Docker image (only for docker deployments)"
    required: false
    default: ""

  docker-entrypoint:
    description: "Docker entrypoint (only for docker deployments)"
    required: false
    default: ""

  docker-command:
    description: "Docker CMD (only for docker deployments)"
    required: false
    default: ""

  docker-private-registry-secret:
    description: "Docker secret in case you are using a private registry (only for docker deployments)"
    required: false
    default: ""

  # Git deployment
  git-url:
    description: "URL of the GIT repository to deploy"
    required: false
    default: "github.com/${{ github.repository }}"

  git-workdir:
    description: "Workdir, if the application to build is not in the root directory of the repository"
    required: false

  git-branch:
    description: "GIT branch to deploy"
    required: false
    default: "${{ github.ref_name }}"

  git-sha:
    description: "Sha of the commit to deploy"
    required: false
    default: ""

  git-builder:
    description: "Type builder to user (buildpack or docker)"
    required: false
    default: "buildpack"

  # Git deployment: buildpack builder options
  git-build-command:
    description: "Command to build the application (only for git deployments with the buildpack builder)"
    required: false
    default: ""

  git-run-command:
    description: "Command to run the application (only for git deployments with the buildpack builder)"
    required: false
    default: ""

  # Git deployment: docker builder options
  git-docker-command:
    description: "Docker CMD (only for git deployments with the docker builder)"
    required: false
    default: ""

  git-docker-dockerfile:
    description: "Dockerfile path (only for git deployments with the docker builder)"
    required: false
    default: ""

  git-docker-entrypoint:
    description: "Docker entrypoint (only for git deployments with the docker builder)"
    required: false
    default: ""

  git-docker-target:
    description: "Dockerfile build target (only for git deployments with the docker builder)"
    required: false
    default: ""

  # Service options
  service-instance-type:
    description: "Type of instance to use to run the service"
    required: false
    default: "nano"

  service-regions:
    description: "Comma separated list of region identifiers to specify where the service should be deployed"
    required: false
    default: "fra"

  service-env:
    description: "Comma separated list of <KEY>=<value> to specify the application environment"
    required: false
    default: ""

  service-ports:
    description: "Comma separated list of <KEY>=<value> to specify the ports to expose"
    required: false
    default: "80:http"

  service-routes:
    description: "Comma separated list of <path>:<port> to specify the routes to expose"
    required: false
    default: "/:80"

  service-checks:
    description: "Comma separated list of <port>:<protocol>:<path> to specify the service healthchecks"
    required: false

  service-type:
    description: "Service type (\"web\" or \"worker\")"
    required: false
    default: "web"

  skip-cache:
    description: "Whether to skip the cache when building the application"
    required: false
    default: "false"

  deployment-strategy:
    description: "Deployment strategy, either `rolling` (default), `blue-green` or `immediate`."
    required: false
    default: "rolling"

runs:
  using: "composite"
  steps:
    - name: Slugify application name
      shell: sh
      run: |
        if [ -z "${{ inputs.app-name }}" ]; then
          # Remove the owner from the repository
          APP_SLUG=$(echo '${{ github.repository }}/${{ github.ref_name }}' | cut -d '/' -f 2-)
        else
          APP_SLUG="${{ inputs.app-name }}"
        fi

        # sed: to replace non alphanum chars with -
        # tail: limit to the last 23 chars (maximum Koyeb application name)
        # sed: if the leading char is a dash, remove it
        echo "APP_SLUG=$(echo $APP_SLUG | sed 's/[^a-z0-9]/-/g' | tail -c 24 | sed 's/^-//g')" | tee $GITHUB_ENV

    - name: Slugify service name
      shell: sh
      run: |
        # sed: to replace non alphanum chars with -
        echo "SERVICE_SLUG=$(echo ${{ inputs.service-name }} | sed 's/[^a-z0-9]/-/g')" | tee $GITHUB_ENV

    - name: Create Koyeb application
      shell: sh
      run: |
        ${{ github.action_path }}/scripts/app-create.py \
          --app-name "${{ env.APP_SLUG }}"

    - name: Create Koyeb service
      shell: sh
      run: |
        if [ -n "${{ inputs.docker }}" ]; then
            ${{ github.action_path }}/scripts/service-upsert.py \
              --app-name "${{ env.APP_SLUG }}" \
              --service-type "${{ inputs.service-type }}" \
              --service-name "${{ env.SERVICE_SLUG }}" \
              --docker "${{ inputs.docker }}" \
              --docker-entrypoint "${{ inputs.docker-entrypoint }}" \
              --docker-command "${{ inputs.docker-command }}" \
              --docker-private-registry-secret "${{ inputs.docker-private-registry-secret }}" \
              --service-instance-type "${{ inputs.service-instance-type }}" \
              --service-regions "${{ inputs.service-regions }}" \
              --service-env "${{ inputs.service-env }}" \
              --service-ports "${{ inputs.service-ports }}" \
              --service-routes "${{ inputs.service-routes }}" \
              --service-checks "${{ inputs.service-checks }}" \
              --privileged "${{ inputs.privileged }}" \
              --skip-cache "${{ inputs.skip-cache }}" \
              --deployment-strategy "${{ inputs.deployment-strategy }}"
        else
          if [ "${{ inputs.git-builder }}" = "buildpack" ];
          then
            ${{ github.action_path }}/scripts/service-upsert.py \
              --app-name "${{ env.APP_SLUG }}" \
              --service-type "${{ inputs.service-type }}" \
              --service-name "${{ env.SERVICE_SLUG }}" \
              --git-url "${{ inputs.git-url }}" \
              --git-workdir "${{ inputs.git-workdir }}" \
              --git-branch "${{ inputs.git-branch }}" \
              --git-sha "${{ inputs.git-sha }}" \
              --git-builder "buildpack" \
              --git-build-command "${{ inputs.git-build-command }}" \
              --git-run-command "${{ inputs.git-run-command }}" \
              --service-instance-type "${{ inputs.service-instance-type }}" \
              --service-regions "${{ inputs.service-regions }}" \
              --service-env "${{ inputs.service-env }}" \
              --service-ports "${{ inputs.service-ports }}" \
              --service-routes "${{ inputs.service-routes }}" \
              --service-checks "${{ inputs.service-checks }}" \
              --privileged "${{ inputs.privileged }}" \
              --skip-cache "${{ inputs.skip-cache }}" \
              --deployment-strategy "${{ inputs.deployment-strategy }}"
          else
            ${{ github.action_path }}/scripts/service-upsert.py \
              --app-name "${{ env.APP_SLUG }}" \
              --service-type "${{ inputs.service-type }}" \
              --service-name "${{ env.SERVICE_SLUG }}" \
              --git-url "${{ inputs.git-url }}" \
              --git-workdir "${{ inputs.git-workdir }}" \
              --git-branch "${{ inputs.git-branch }}" \
              --git-sha "${{ inputs.git-sha }}" \
              --git-builder "docker" \
              --git-docker-command "${{ inputs.git-docker-command }}" \
              --git-docker-dockerfile "${{ inputs.git-docker-dockerfile }}" \
              --git-docker-entrypoint "${{ inputs.git-docker-entrypoint }}" \
              --git-docker-target "${{ inputs.git-docker-target }}" \
              --service-instance-type "${{ inputs.service-instance-type }}" \
              --service-regions "${{ inputs.service-regions }}" \
              --service-env "${{ inputs.service-env }}" \
              --service-ports "${{ inputs.service-ports }}" \
              --service-routes "${{ inputs.service-routes }}" \
              --service-checks "${{ inputs.service-checks }}" \
              --privileged "${{ inputs.privileged }}" \
              --skip-cache "${{ inputs.skip-cache }}" \
              --deployment-strategy "${{ inputs.deployment-strategy }}"
          fi
        fi

    - id: get-deployment
      name: Get last deployment of the Koyeb service
      shell: sh
      run: |
        ${{ github.action_path }}/scripts/deployment-get-last-id.py \
          --app-name "${{ env.APP_SLUG }}" \
          --service-name "${{ env.SERVICE_SLUG }}" | tee $GITHUB_OUTPUT

    - name: Show build logs
      shell: sh
      run: |
        ${{ github.action_path }}/scripts/deployment-show-build-logs.py \
          --deployment-id "${{ steps.get-deployment.outputs.deployment-id }}" \
          --timeout "${{ inputs.build-timeout }}"

    - name: Poll deployment status
      shell: sh
      run: |
        ${{ github.action_path }}/scripts/deployment-wait-healthy.py \
          --deployment-id "${{ steps.get-deployment.outputs.deployment-id }}" \
          --timeout "${{ inputs.healthy-timeout }}"

    - name: Show app domain
      shell: sh
      run: |
        ${{ github.action_path }}/scripts/app-show-domain.py \
          --app-name "${{ env.APP_SLUG }}"